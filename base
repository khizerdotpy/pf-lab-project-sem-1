#include <stdio.h>
#include <conio.h> 
#include <stdlib.h>
#include <time.h> 
#include<windows.h>

#define MAZE_WIDTH 30
#define MAZE_HEIGHT 15
#define DEFAULT_OBSTACLE_PERCENTAGE 10

static char maze[MAZE_HEIGHT][MAZE_WIDTH];
int playerX = 1, playerY = 1;

//difficulty condition
int obstaclePercentage = DEFAULT_OBSTACLE_PERCENTAGE;

typedef struct {
    char name[100];
    int score;
    char pdifficulty[10];
} Player;

   Player player;
// saving  player score to file
void savePlayerScore(Player player) {
    FILE *file = fopen("player_scores.txt", "a");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    } 
    
    fprintf(file, "Name: %s, Difficulty: %s, Score: %d\n", player.name, player.pdifficulty, player.score);
    fclose(file);
}

void viewAllScores() {
    FILE *file = fopen("player_scores.txt", "r");
    char line[256];
    if (file != NULL) {
        printf("\n--- Player Scores ---\n");
        while (fgets(line, sizeof(line), file)) {
            printf("%s", line);
        }
        fclose(file);
    } else {
        printf("No scores found.\n");
    }
}

void viewIndividualScore(char *playerName) {
    FILE *file = fopen("player_scores.txt", "r");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    char line[256];
    int found = 0;

    // Read the file line by line
    while (fgets(line, sizeof(line), file)) {
        char name[100];
        int score;
        char difficulty[10];

        if (sscanf(line, "Name: %99[^,], Difficulty: %9[^,], Score: %d", name, difficulty, &score) == 3) {
            if (strcmp(name, playerName) == 0) {
                printf("\n--- Individual Player Score ---\n");
                printf("Player: %s\n", name);
                printf("Difficulty: %s\n", difficulty);
                printf("Score: %d\n", score);
                found = 1;
                break;
            }
        }
    }

    if (!found) {
        printf("No score found for player: %s\n", playerName);
    }

    fclose(file);
}


// Set difficulty and other game parameters
int difficultySet(int *percentage, int *moveLimit, double *timeLimit) {
    char diffInput;
	char difficulty;
    printf("\n Enter:\n 'P' to Play\n 'V' to View your Score\n 'S' to View All Scores\n");
    printf("\n Enter option: ");
    diffInput = _getch();
    switch (diffInput) {
        case 'P': case 'p':
            printf("\nEnter your name:");
            fgets(player.name,50,stdin);
            player.name[strcspn(player.name, "\n")] = 0; 
            printf("\n Enter:\n 'E' for Easy\n 'M' for Medium\n 'H' for Hard\n 'C' to create custom difficulty\n");
            printf("\n Enter difficulty: ");
            difficulty = _getch();
            switch (difficulty){
                case 'E': case 'e':
                    *percentage = 10;
                    *moveLimit = 0;
                    *timeLimit = 0;
                    strcpy(player.pdifficulty, "Easy");
                    printf("\nDifficulty set to Easy.\n");
                    break;
                case 'M': case 'm':
                    *percentage = 15;
                    *moveLimit = 0;
                    *timeLimit = 20;
                    strcpy(player.pdifficulty, "Medium");
                    printf("\nDifficulty set to Medium. Time limit: 20 seconds.\n");
                    break;
                case 'H': case 'h':
                    *percentage = 20;
                    *moveLimit = 45;
                    *timeLimit = 30;
                    strcpy(player.pdifficulty, "Hard");
                    printf("\nDifficulty set to Hard. Time limit: 30 seconds, Move limit: 45.\n");
                    break;
                case 'C': case 'c':
                    *percentage = 20;
                    strcpy(player.pdifficulty, "Custom");
                    printf("\nEnter custom time limit: ");
                    scanf("%lf", timeLimit);
                    printf("Enter custom move limit: ");
                    scanf("%d", moveLimit);
                    printf("\nTime limit: %.2f, Move limit: %d\n", *timeLimit, *moveLimit);
                    break;
                default:
                    *percentage = 10;
                    *moveLimit = 0;
                    *timeLimit = 0;
                    strcpy(player.pdifficulty, "Easy");
                    printf("\nInvalid input. Defaulting to Easy.\n");
            }
            break;
        case 'V':
        case 'v':
            
               printf("\nEnter your name to view your score: ");
                char playerName[100];
                scanf("%s", playerName);
                viewIndividualScore(playerName);
                 return difficultySet(percentage,moveLimit,timeLimit);
            break;
        case 'S':
        case 's':
            viewAllScores();
             return  difficultySet(percentage,moveLimit,timeLimit);
            break;
        default:
            printf("\nInvalid input.\n");
             return difficultySet(percentage,moveLimit,timeLimit);
            break;
    }
    return 0;
}

//maze maker
void initializeMaze() {
    int i = 0, j = 0;
    for (i = 0; i < MAZE_HEIGHT; i++) {
        for (j = 0; j < MAZE_WIDTH; j++) {
            if (i == 0 || i == MAZE_HEIGHT - 1) {
                maze[i][j] = (j == 0 || j == MAZE_WIDTH - 1) ? '+' : '-';
            } else {
                maze[i][j] = (j == 0 || j == MAZE_WIDTH - 1) ? '|' : ' ';
            }
        }
    }
    maze[MAZE_HEIGHT - 2][MAZE_WIDTH - 2] = 'E'; 
    maze[playerX][playerY] = 'P';

    for (i = 1; i < MAZE_HEIGHT - 1; i++) {
        for (j = 1; j < MAZE_WIDTH - 1; j++) {
            if (maze[i][j] == ' ' && (rand() % 100) < obstaclePercentage) {
                maze[i][j] = '#';
            }
        }
    }
}
//colors using win 32 API
void setConsoleColor(int textColor, int backgroundColor) {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, (backgroundColor << 4) | textColor);
}
// background+foregorund color;
void resetConsoleColor() {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, 15); 
}

void displayMaze(double elapsedTime) {
    system("cls");
    int i,j;
    for (i = 0; i < MAZE_HEIGHT; i++) {
        for (j = 0; j < MAZE_WIDTH; j++) {
            if (i == playerX && j == playerY) {
                setConsoleColor(10, 0);
                printf("P ");
            } else if (maze[i][j] == '#') {
                setConsoleColor(4, 0);
                printf("# ");
            } else if (maze[i][j] == 'E') {
                setConsoleColor(14, 0);
                printf("E ");
            } else {
                setConsoleColor(7, 0);
                printf("%c ", maze[i][j]);
            }
        }
        printf("\n");
    }
    resetConsoleColor();
    printf("Time: %.0f seconds\n", elapsedTime);
}

//input handling
int movePlayer(char direction) {
    int newX = playerX, newY = playerY;

    switch (direction) {
        case 'W': 
        case 'w':
        newX--; 
        break;
        case 'A': 
        case 'a': 
        newY--; 
        break;
        case 'S': 
        case 's': 
        newX++; 
        break;
        case 'D':
        case 'd': 
        newY++; 
        break;
        default: 
        return 0;
    }
    //out of bounds
    if (maze[newX][newY] != '#' && maze[newX][newY] != '|' && maze[newX][newY] != '-') {
        maze[playerX][playerY] = ' '; 
        playerX = newX;
        playerY = newY;
        return 1;
    }
    return 0;
}
//self-explanatory
int checkWin(double elapsedTime) {
    if (maze[playerX][playerY] == 'E') {
        if (strcmp(player.pdifficulty, "Easy") == 0) {
            player.score = 1000 / elapsedTime;
        } else if (strcmp(player.pdifficulty, "Medium") == 0) {
            player.score = 5000 / elapsedTime;
        } else if (strcmp(player.pdifficulty, "Hard") == 0) {
            player.score = 10000 / elapsedTime;
        }
        return 1;
    }
    return 0;
}

//moving sound
int soundMove(char direction) {
    static int freq = 300;
    if (movePlayer(direction)) {
        Beep(freq, 50);
        freq++;
        if (freq > 550) freq = 300; 
        return 1;
    }
    return 0;
}
//if player wins
void playWinSound() {
    MCIERROR errorCode;
    char errorText[128];

    if (mciSendString("open \"smb_gameover.wav\" type mpegvideo alias winWAV", NULL, 0, NULL)) {
        mciGetErrorString(errorCode, errorText, sizeof(errorText));
        printf("Error: %s\n", errorText);
    } else {
        mciSendString("play winWAV", NULL, 0, NULL);
        Sleep(3000);  
        mciSendString("stop winWAV", NULL, 0, NULL);
        mciSendString("close winWAV", NULL, 0, NULL);
    }
}


// if time limit exceeded + if loses
void timeOversound() {
    MCIERROR errorCode;
    char errorText[128];

    if (mciSendString("open \"smb_mariodie.wav\" type mpegvideo alias overWAV", NULL, 0, NULL)) {
        mciGetErrorString(errorCode, errorText, sizeof(errorText));
        printf("Error: %s\n", errorText);
    } else {
        mciSendString("play overWAV", NULL, 0, NULL);
        Sleep(2000);  
        mciSendString("stop overWAV", NULL, 0, NULL);
        mciSendString("close overWAV", NULL, 0, NULL);
    }
}

void playBackgroundSound(){
    mciSendString("open \"01. Ground Theme.mp3\" type mpegvideo alias backMP3",NULL,0,NULL);
    mciSendString("play backMP3", NULL,0,NULL);
    char errorText[128];
    MCIERROR errorCode;
if (mciSendString("play myAudio", NULL, 0, NULL)) {
    mciGetErrorString(errorCode, errorText, sizeof(errorText));
     printf("Error: %s\n", errorText); 
     }

}
void stopBackgroundSound(){
    mciSendString("stop backMP3",NULL,0,NULL);
    mciSendString("close backMP3",NULL,0,NULL);
}

void displayInstructions() {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE);
    printf("Welcome to the maze game!\n");
    SetConsoleTextAttribute(hConsole, 15);
    printf("Your goal is to navigate the maze and reach the exit 'E'.\n");
    printf("Use W, A, S, D to move:\n");
    printf("  W - Move up\n");
    printf("  A - Move left\n");
    printf("  S - Move down\n");
    printf("  D - Move right\n");
    printf("Obstacles are represented by '#'. Avoid them!\n");
    printf("The player is represented by 'P', and the exit is 'E'.\n");
}

int main() {
    char input;
    time_t startTime, currentTime;
    double elapsedTime;
    int moveCount = 0;
    int moveLimit = 0;
    double timeLimit = 0;
    system("cls");
    playBackgroundSound();
    displayInstructions();
    difficultySet(&obstaclePercentage, &moveLimit, &timeLimit);
    srand(time(NULL));
    initializeMaze();
    time(&startTime);

    while (1) {
        time(&currentTime);
        if (checkWin(elapsedTime)) {
            stopBackgroundSound();
            playWinSound();
            printf("\nCongratulations, %s! You reached the exit in %.0f seconds!\n", player.name, elapsedTime);
            printf("Your Score: %d\n", player.score);
            printf("Difficulty Level: %s\n", player.pdifficulty);
            break;
        }

        if (timeLimit > 0 && elapsedTime >= timeLimit) {
            stopBackgroundSound();
            timeOversound();
            printf("\nTime limit exceeded. You lose!\n");
            break;
        }

        if (moveLimit > 0 && moveCount >= moveLimit) {
            stopBackgroundSound();
            timeOversound();
            printf("\nMove limit exceeded. You lose!\n");
            break;
        }
        elapsedTime = difftime(currentTime, startTime);
        displayMaze(elapsedTime);
        printf("Use W, A, S, D to move (Q to quit): ");
        input = _getch();
        if (input == 'Q' || input == 'q') {
            printf("\nYou quit the game.\n");
            break;
        }

        if (soundMove(input)) {
            moveCount++;
        }

        if (moveLimit > 0) {
            printf("\nMoves left: %d\n", moveLimit - moveCount);
        }
    }
  savePlayerScore(player);
    return 0;
}
